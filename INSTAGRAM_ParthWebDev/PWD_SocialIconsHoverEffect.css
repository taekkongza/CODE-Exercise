*, *::before, *::after  {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* 
::before와 ::after는 요소의 콘텐츠 앞과 뒤에 내용을 삽입할 때 사용되는 가상 요소입니다.
*/


body {
  height: 100vh;
  background-color: hsl(214, 20%,90%);
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 
hsl은 CSS에서 색상을 지정하는 방법중 하나
hsl 함수는 색조(Hue) 채도(Saturation) 명도(Lightness)의 세가지 값을 사용하여 색상을 정의합니다.

1. Hue 색조
색상의 종류
0 부터 360 까지의 각도 (degree)로 표현, 생상환의 위치를 나타냅니다.
예 > 0 도 빨강
     120 도 초록
     240 도 파랑

2. Saturation 채도
색의 강도나 순도
0 % 회색(무채색)을 의미하고  100 % 가장 강한 색을 의미

3. Lightness 명도
색의 밝기
0 % 검정색 100 % 흰색 
50 % 원래 색의 밝기


예> 
hsl(214, 20%, 90%)
214 색조로 파랑색에 가까운색
20% 채도 덜 강렬한색
90% 명도 매우 밝은색

 HSL에서 회색은 Hue는 0 (무관), 채도(Saturation)를 0%로 설정하고, 명도(Lightness)를 조절하여 다양한 밝기의 회색을 만들 수 있습니다

*/

.wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
}

.icon {
  text-decoration: none;
  width: 5.625rem;
  height: 5.625rem;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}

/* 
border-radius : 50%;
요소의 너비와 높이가 같을때 border-radius 50%는 완전한 원형
너비와 높이가 다를때 - 타원

border-radius : 5px;
각모서리가 5px 반경으로 둥글게 됨.
*/


.icon > i {
  color: #fff;
  font-size: 1.5rem;
  transition: all 0.2s;
}

/*
transition: property duration timing-function delay;

transition은 요소의 변화가 나타날때 그 변화를 부드럽게 만들어주는 CSS 속성

property :  변화를 적용할 CSS 속성

timing-function : 변화의 속도 곡선 - ease , linear, ease-in, ease-out, ease-in-out

1. ease :  가장 많이, 시작끝 변화가 느리고 중간에 빠르게
2. ease-in : 시작 느리고 후로 빠르게
3. ease-out: 빠르다 끝느리게
4. ease-in-out:  시작끝느리고 중간 빠르게 -- ease와 비슷하지만
     시작끝이 덜느리고, 끝이 빠르다.

*/

.icon:hover > i {
  scale: 2.2;
  background: linear-gradient(220.55deg, #454545 0% , #181818 100%);
  /* background: linear-gradient(220.55deg #a531dc 0% #4300b1 100%); */
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}


/*
scale : 2.2;   요소 크기 2.2배로 확대

linear-gradient 함수를 사용, 배경을 그라데이션
220.55deg로 방향으로 그라데이션

background-clip: text
배경 그라데이션을 텍스트에만 적용
텍스트 내용에만 그라데이션 효과가 적용
텍스트 이외의 영역에는 적용되지 않는다.

-webkit-background-clip: text;
웹킷브라우져에서도 background-clip 속성이 적용되도록 한다.
-webkit- 접두사는 구형 버전의 웹킷 브라우저에서 지원하기 위해 사용

-webkit-text-fill-color: transparent;
웹킷 엔진을 사용하는 브라우저에서 텍스트 색상을 투명하게

*/

.icon::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 100%;
  background: linear-gradient(220.55deg, #454545 0% , #181818 100%);
  /* background: linear-gradient(220.55deg #a531dc 0% #4300b1 100%); */
  scale: 1;
  z-index: -1;
  transition: all 300ms ease-out;
}

/* 
inset: 0;
가상요소의 위치를 부모 요소의 상하좌우에 대하여 0으로 설정
부모 요소를 완전히 덮도록 한다.

z-index: -1;
가상요소를 부모 요소의 배경 아래로 위치

*/

.icon:hover::before {
  scale: 0;
}

/* 
.icon::before 와 .icon::after 는 모두 가상요소를 생성하는 CSS 선택자입니다.
이 두 선택자의 차이점은 생성되는 위치에 있습니다.

1. .icon::before
::before는 선택된 요소의 내부의 맨 앞에 콘텐츠를 생성
.icon 클래스에 적용된 요소의 내부의 첫번째 자식으로 가상요소를 생성합니다.

2. .icon::after 
::after 는 선택된 요소의 내부의 맨 뒤에 콘텐츠를 생성
.icon 클래스에 적용된 요소의 내부의 마지막 자식으로 가상요소를 생성합니다.


결과적으로 .icon::before 는 .icon 클래스에 적용된 내부의 맨앞에 콘텐츠를 생성하고 스타일을 적용하는 반면,
.icon::after 는 내부의 맨 뒤에 콘텐츠를 생성하고 스타일을 적용합니다.
*/


/* 
가상요소를 사용하는 이유
1. 시각적인 효과 추가
2. 반복요소 스타일링
3. 스타일링 구성의 일부로 사용 - HTML 구조에 영향을 주지 않는다.
4. 자바스크립트와 상호작용
가상요소는 자바스크립트의 이벤트리스너를 추가할 수 없기 때문에
HTML요소에 부여된 기능이 없고, ***단순희 디자인에만 관여할 때 유용***합니다.
이를 통해 코드의 복잡성을 줄이고 구조를 단순화할 수 있습니다.
*/

