*, *::before, *::after{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* 
  # CSS에서 가상 클래스(Pseudo-class)는 
    선택자에 추가하여 특정 상태나 조건을 만족하는 요소를 선택
    할수 있게 해줍니다. 

    가상 클래스는 콜론(:)으로 시작하며, 선택자 뒤에 붙여 사용합니다.
    예를 들어 a:hover 는 마우스 포인터가 올라가 있는 링크 요소를 선택합니다.

    가상 클래스 종류
    - 동적 :link :visited :hover :active :focus
          요소의 상태에 따라 달라지는 클래스
    - 구조 :first-child :last-child :nth-child( )
          :nth-last-child( ) :only-child( )
          요소의 위치나 개수에 따라 달라지는 클래스
    - 기타 :target :lang( ) :not( ) :root :empty  
          다양한 조건을 만족하는 요소를 선택하는 클래스

  # 가상 클래스 와 클래스 
    가상 클래스는 실제 요소의 상태나 조건을 선택, CSS에서 정의
    클래스는 요소를 개발자가 직접 지정한 이름으로 선택, HTML에서 정의


  # 가상 요소(Pseudo-element)
    가상 클래스와 유사하지만 구분되는 개념
    가상 요소는 콜론 두개(::)를 사용 하며, 
    요소의 특정 *부분*을 선택하거나 생성할 때 사용합니다.
    
    예를 들어 
    ::before, ::after는 요소의 내용 앞뒤에 
    새로운 내용을 삽입할때 사용합니다.



  # HTML에서 요소는(element)는 태그로 구성된 기본 구조
    요소는 시작태그 , 내용, 종료태그로 구성되며, 속성을 포함할 수 있습니다.
    <...> ... </...>  ~~~ 요소

  # 요소의 선택자 (Element Selector)
    CSS에서 요소 선택자(Element Selector)는 HTML 문서의 특정 요소를
    선택하여 스타일을 적용하는데 사용됩니다.

    요소 선택자는 HTML 태그 이름으로 구성됩니다.
    - h1 모든 <h1> 요소를 선택
    - p  모든 <p> 요소를 선택
    - div 모든 <div> 요소를 선택



  # 요소(Element) 선택자 와 가상요소(Pseudo-element) 선택자

    요소 선택자와 가상 요소 선택자는 
    CSS에서 요소를 선택하고, 스타일을 적용하는데 사용되지만,
    선택자의 구문과 선택 대상에 차이가 있습니다.

    @ 차이점
      1. 선택자 구문
        - 요소 선택자는 태그 이름으로 시작합니다. 
        예) div, p
        - 가상 요소 선택자는 콜론을 두 개(::)로 시작합니다. 
        예) ::before ::after
      2. 선택 대상
        - 요소 선택자는 실제 존재하는 HTML요소를 선택합니다.
        - 가상 요소 선택자는 실제 요소의 특정 부분을 선택하거나
          생성합니다.
          예) 요소의 첫글자, 요소의 내용 앞뒤등
    
    @ 공통점 
      1. 선택자 뒤에 붙여 사용
        - 요소 선택자와 가상 요소 선택자는 선택자 뒤에 붙여 사용
          예) p::first-line
      2. 스타일 적용
        - 요소 선택자와 가상 요소 선택자에 스타일을 적용할 수 있습니다.
          예) p { color:red; } , p::first-line { font-weight: bold; }
      3. 복잡한 선택자 대체
        - 요소 선택자와 가상 요소 선택자를 사용하면 복잡한 선택자 없이도
          특정 요소를 선택할 수 있습니다.

    요약
    요소 선택자는 실제 HTML 요소를 선택하고 
    가상 요소 선택자는 실제 요소의 특정 부분을 선택하거나 생성한다는 차이점
  */

body {
  display: flex;
  justify-content: center;
  align-items: center;
  background: #ee4a56;
  font-family: Arial, Helvetica, sans-serif;
}

main {
  background-color: #fff;
  border-radius: 1.5rem;
  width: 90%;
  max-width: 380px;
  margin: 5rem 0;
  padding: 1.5rem;
}

/* Navbar */
nav ul {
  display: flex;
  justify-content: space-evenly;  
}

nav ul li {
  list-style: none;
  /* 
    list-style
      목록의 마커 스타일을 지정
        -list-style-type : none disc circle square decimal lower-roman...
        -list-style-image : 마커로 사용할 이미지 URL
        -list-style-position : 마커의 위치를 지정 inside는 목록 항목 안에,
                              outside는 목록 항목 밖에 위치
  */
  cursor: pointer;  
}

nav ul li:hover .icon-tabler {
  background-color: #ee4a56;
  color: #fff;
}

nav ul li:hover p {
  visibility: hidden;
  /* 
    visibility
      요소의 화면 표시 여부를 지정하는데 사용
      문서의 레이아웃을 변경하지 않고 요소를 보이거나 숨길 수 있습니다.

      visible : 요소가 보임
      hidden : 안보임. 공간은 그대로 유지
      collapse : 안보임, 공간도 제거  
  */
}

.item {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.7rem;
  font-weight: 700;
}

.item .icon-tabler {
  border-radius: 50%;
  padding: 0.5rem;
}

/* Frequent payments section */
.frequent-payments {
  margin: 3rem 0;
  background: linear-gradient(90deg, #ee4a56, #f34d50d7);
  border-radius: 1rem;
  padding: 1rem;
  color: #fff;
}

h3 {
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.5rem;
}

.icon-tabler-dots {
  cursor: pointer;
}

.profile-images {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  gap: 0.25rem;
}


img {
  border-radius: 50%;
  border: 3px solid #f48fa2ba;
  object-fit: cover;
  object-position: top;
/* 
  # object-fit
  # object-position

  object-fit와 object-position 속성은 <img> <video>
  대체요소(replaced element)의 콘텐츠 크기와 위치를 조절하는데 사용

  # object-fit 속성은 대체 요소의 콘텐츠가 
    지정된 너비와 높이에 맞게 조정되는 방식을 지정
    프로필 이미지나 고정된 크기의 썸네일을 출력할 때 유용합니다.
    + fill : 지정된 크기에 맞게 늘어나거나 줄어듬. 종횡비 유지 안됨.
    + contain : 종횡비 유지하면서 최대한 크게 확대, 빈공간(+)
    + cover : 종횡비 유지 공간을 가득채움, 콘텐츠 잘릴수 있음
    + none : 원본 크기
    + scale-down : 원본 크기보다 작아질 수 있음

  # object-position 속성은 대체 요소의 콘텐츠가 요소 내부에서
    어느 위치에 배치될지 지정합니다.
    background-position 속성과 유사하지만 대체 요소에 적용됩니다.

    object-position : x축 , y축
    키워드 - left center right top bottom
    길이단위 - px %
    기본값 - 50% 50% 요소의 정중앙에 위치
*/

/* 
  # object-position 과 유사한 속성

  - background-position
    요소의 배경 이미지의 초기 위치를 지정합니다.
    object-position과 유사하지만 배경 이미지에 적용됩니다.
    ```css
    background-position: x y;
  
  - transform-origin
    요소의 변형 원점을 지정
    요소의 회전, 크기 조정등의 변형을 적용할 때 기준점이 됩니다.
    ```css
    transform-origin: x-axis y-axis z-axis;

  - perspective-origin
    3D 변형이 적용된 요소의 원근감 원점을 지정합니다.
    요소의 3D변형이 어디에서 시작할지 결정합니다.
    ```css
    perspective-origin: x-axis y-axis;
*/
  min-width: 60px;
  height: 60px;
}

/* Profile Section */
.profiles {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  margin-bottom: 3rem;
  box-shadow: 0 0 1rem #c69999;
  border-radius: 1rem;
}

.profile:first-of-type, .profile:nth-child(3) {
  border-right: 1px solid #dcdcdc;
}
/* 
첫번째 .profile 요소, 세번째 .profile 요소
*/
.profile:first-of-type, .profile:nth-child(2) {
  border-bottom: 1px solid #dcdcdc;
}
/* 
첫번째 .profile 요소, 2번째 .profile 요소
*/

/* 
  .profile:first-of-type
  .profile:nth-child(3)
  CSS의 가상 클래스 선택자로 특정 조건을 만족하는 요소를 선택

  # :first-of-type
      first-of-type 가상 클래스는 부모 요소의 자식 요소 중
      특정 유형의 첫번째 요소를 선택한다.

      예) .profile: first-of-type은 클래스가 profile인 요소중
      부모의 첫번째 profile 요소를 선택합니다.

      이 가상 클래스는 :fist-child 와 유사하지만, 
      :first-child는 *모든 유형*의 첫번째 자식 요소를 
      선택하는 반면
      :first-of-type은 *특정 유형*의 첫번째 자식 요소만 선택한다는
      차이점이 있습니다.
  
  
  # :nth-child( )
      :nth-child( ) 가상 클래스는 부모 요소의 자식 요소중 특정 순서에 있는
      요소를 선택합니다.
      :nth-child(3) 는 부모의 세번째 자식 요소를 선택

      이 가상 클래스는 숫자 외에도 odd even 3n 3n+! 등의
      수식을 사용할 수 있습니다.
      예)
      :nth-child(odd) 는 홀수 번째 자식 요소를
      :nth-child(3n+1) 은 1,4,7,10..번째등 3의 배수에 1 더한 자식요소를 선택한다.

*/


.profile {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.3rem;
  padding: 1.5rem;
  position: relative;
}

.icon-tabler-dots-vertical {
  cursor: pointer;
  position: absolute;
  right: 0.5rem;
  top: 1rem;
  color: #989898;
}

.name {
  font-size: 0.7rem;
  font-weight: 700;
}

.username {
  font-size: 0.6rem;
  color: #0000007e;
}

.profile button {
  border-radius: 1rem;
  border: 1px solid transparent;
  color: #fff;
  padding: 0.5rem;
  width: 90px;
  font-size: 0.6rem;
  background: linear-gradient(90deg, #ee4a56, #e2595be4);
  cursor: pointer;
  margin-top: 0.5rem;
}

.profile button:hover {
  background: transparent;
  border-color: #ee4a56;
  color: #ee4a56;
}


.profile button.added {
  background: transparent;
  border-color: #ee4a56;
  color: #ee4a56;
}


/* Slider section */
.splide {
  margin-bottom: 1.5rem;
}

.splide li p {
  font-size: 0.8rem;
  color: #515151;
  text-align: center;
  line-height: 1.4;
  padding: 0 2rem;
}

.splide__arrows {
  display: flex;
  justify-content: space-between;
  padding: 0 1.5rem;
}

.splide__arrows button {
  color: #ee4a56;
  background: transparent;
  border: 1px solid #ee4a553d;
  border-radius: 1rem;
  padding: 0.1rem 0.8rem;
  cursor: pointer;
  display: flex;
  align-items: center; 
  justify-content: center;
}

.splide__arrows--prev {
  transform: scaleX(-1);
}

.splide__pagination__page {
  background: #ee4a5589;
  width: 0.3rem;
  height: 0.3rem;
}

.splide__pagination__page.is-active {
  background: #ee4a56;
  border: 2px solid #ffa4a4;
  width: 0.5rem;
  height: 0.5rem;
  
}

@media (max-width: 320px) {
  /* 화면 크기가 320px 이하일 때 적용되는 미디어 쿼리 */
  .profile:nth-child(3) {
    border-bottom: 1px solid #dcdcdc;
    border-right: none;
  }
  .profile:first-of-type {
    border-right: none;
  }
}

/* 
  *쿼리* 라는 용어는 프로그래밍 분야에서 
  데이터를 요청하거나 검색하는 행위를 나타낸다.

  단
  미디어 쿼리는 CSS에서 장치의 특성에 따라
  스타일을 적용하는 기능
*/


/* 
  @media 
    미디어 쿼리는 반응형 웹 디자인에서 매우 중요한 기능입니다.
    미디어 쿼리를 사용하면 환면 크기나 기기 특성에 따라 선택적으로 CSS 스타일을 적용할 수 있습니다.

    기본문법 CSS
    @media (조건) {
      // 조건이 true일 때 정용될 CSS 
    }

    여기서 조건은 
    미디어 유형(screen, print등)이나
    미디어 특성(width, height, orientation 등)을 나타냅니다.
    이 조건이 true일때 중괄호 안의 CSS 스타일이 적용된다.

    # 미디어 유형
      장치의 일반적인 범주, 
      대표적인 미디어 유형으로는 
      screen print speech등이 있습니다.
      미디어 유형을 지정하지 않으면 
      기본값인 all 이 사용됩니다.

    # 미디어 특성
      미디어 특성은 장치의 구체적인 특성을 나타냅니다.
      대표적인 미디어 특성으로는
      width height orientation resolution 등이 있습니다.

    예)
    화면 너비가 320px 이하일 때
    @media (max-width: 320px) {
      스타일 적용
    }

    화면 방향이 landscape 일 때
    @media (orientation: landscape) {
      스타일 적용
    }

    화면 해상도가 2배 이상일 때
    @media (min-resolution: 2dppx) {
      스타일 적용
    }

  */




